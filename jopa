package com.ERG.erglogger;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;
import android.os.Bundle;
import android.os.SystemClock;
import android.util.Log;

import com.hoho.android.usbserial.driver.UsbSerialDriver;
import com.hoho.android.usbserial.driver.UsbSerialPort;

import java.security.Permission;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    UsbManager manager;
    PendingIntent permissionIntent;
    UsbSerialDriver driver;
    String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";

    BroadcastReceiver usbReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (ACTION_USB_PERMISSION.equals(action)) {
                synchronized (this) {
                    UsbDevice device = (UsbDevice)intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                    if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                        if(device != null){
                            Log.d("usb permission", "GRANTED AFTER REQUEST");
                        }
                    }
                    else {
                        Log.d("usb permission", "permission denied for device " + device);
                    }
                }
            }
        }
    };



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // explicit usb permission stuff
        manager = (UsbManager) getSystemService(Context.USB_SERVICE);
        permissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);
        IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
        registerReceiver(usbReceiver, filter);
    }

    // do all the job
    @Override
    protected void onResume() {
        super.onResume();
        //Getting the storage permission status
        int result = ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (result == PackageManager.PERMISSION_GRANTED)
            Log.i("storage permission", "GRANTED");
        else {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
            Log.i("storage permission", "DENIED");
            return;
        }
        // creating a directory for files storing
        if (!Global.directory.exists()) {
            boolean success = Global.directory.mkdirs();
            if (!success) {
                Global.EXTRA_Message = "The directory for file storage was not created :(\n\n" +
                        "The ERGlogger application requires the permission to access the storage of the device!";
                Global.RiseError(this, false);
            }
            Log.i("directory", "CREATED");
        }
        else
            Log.i("directory", "EXISTS");
        // check for USB devices
        if (manager.getDeviceList().isEmpty()) {
            Global.EXTRA_Message = "Cannot find any USB device";
            Global.RiseError(this, true);
            finish();
        }
        else {
            List<UsbSerialDriver> availableDrivers = CustomProber.getCustomProber().findAllDrivers(manager);
            if (availableDrivers.isEmpty()) {
                Global.EXTRA_Message = "The device connected to the SmartPhone is unsupported:\n\nDevice 0483:5740 was not found";
                Global.RiseError(this, true);
            }
            driver = availableDrivers.get(0);
            if (!manager.hasPermission(driver.getDevice())) {
                Log.i("usb permission", "DENIED");
                manager.requestPermission(driver.getDevice(),permissionIntent);
                return;
            }
            else
                Log.i("usb permission", "GRANTED");
                goOn();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        finish();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(usbReceiver);
    }

    private void goOn() {
        UsbDeviceConnection connection = manager.openDevice(driver.getDevice());
        Global.port = driver.getPorts().get(0);
        try {
            Global.port.open(connection);
        } catch (Exception exp) {
            exp.printStackTrace();
            Log.i("usb permission", "Port Open Failed!");
            Global.EXTRA_Message = "Port open failed.\n\nException message is:\n\n" + exp.getMessage();
            Global.RiseError(this, true);
        }
        try {
            Global.port.setParameters(115200, 8, UsbSerialPort.STOPBITS_1, UsbSerialPort.PARITY_NONE);
        } catch (Exception exp) {
            exp.printStackTrace();
            Global.EXTRA_Message = "Port adjustment failed.\n\nException messagew is:\n\n" + exp.getMessage();
            Global.RiseError(this, true);
        }
        // initial hand-shake
        Global.CDC_Send("hello\r\n", this);
        String reply = Global.CDC_Get_String(this);
        Global.devinfo = reply.split("\r\n");
        // start the working activity
        if (Integer.valueOf(Global.devinfo[1]) == 167321907) {
            if (Global.devinfo[2].contains("ERG-T-")) {
                Intent intent = new Intent(this, TActivity.class);
                startActivity(intent);
            } else if (Global.devinfo[2].contains("ERG-TP-")) {
                Intent intent = new Intent(this, TPActivity.class);
                startActivity(intent);
            } else {
                Global.EXTRA_Message = "Device was not recognized :(";
                Global.RiseError(this, true);
            }
        }
    }

    public void getStorageAccess() {
        //Getting the permission status
        int result = ContextCompat.checkSelfPermission(this, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (result == PackageManager.PERMISSION_GRANTED)
            Log.i("storage permission", "GRANTED");
        else {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
            Log.i("storage permission", "DENIED");
            return;
        }
        // creating a directory for files storing
        if (!Global.directory.exists()) {
            boolean success = Global.directory.mkdirs();
            if (!success) {
                Global.EXTRA_Message = "The directory for file storage was not created :(\n\n" +
                        "The ERGlogger application requires the permission to access the storage of the device!";
                Global.RiseError(this, false);
            }
            Log.i("directory", "CREATED");
        }
        else
            Log.i("directory", "EXISTS");
    }
}


